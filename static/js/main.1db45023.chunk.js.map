{"version":3,"sources":["QuoteComponent.js","App.js","serviceWorker.js","index.js"],"names":["QuoteComponent","useState","text","author","quote","setQuote","hex","color","setColor","getQuote","axios","get","then","res","randomIndex","Math","floor","random","data","length","console","log","body","title","catch","err","useEffect","Container","fluid","id","Row","Col","md","span","offset","lg","style","backgroundColor","Button","variant","size","onClick","hexcolors","randomHex","getNewColor","href","target","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oTA8HeA,MApHf,WAA2B,IAAD,EACEC,mBAAS,CACjCC,KAAM,GACNC,OAAQ,KAHc,mBACjBC,EADiB,KACVC,EADU,OAMEJ,mBAAS,CACjCK,IAAK,YAPiB,mBAMjBC,EANiB,KAMVC,EANU,KAWlBC,EAAW,WACfC,IACGC,IACC,4HAEDC,MAAK,SAACC,GACL,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,KAAKC,QACtDC,QAAQC,IAAIR,EAAIK,MAChBb,EAAS,CACPH,KAAMW,EAAIK,KAAKJ,GAAaQ,KAC5BnB,OAAQU,EAAIK,KAAKJ,GAAaS,WAGjCC,OAAM,SAACC,GACNL,QAAQC,IAAII,OA8ClB,OAXAC,qBAAU,WACRjB,MACC,IAUD,kBAACkB,EAAA,EAAD,CAAWC,OAAK,EAACC,GAAG,aAClB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKC,GAAI,CAAEF,KAAM,GAAIC,OAAQ,IACvD,yBAAKL,GAAG,YAAYO,MAAO,CAAEC,gBAAiB9B,EAAMD,MAClD,yBAAKuB,GAAG,SACN,yBAAKA,GAAG,QAAR,IAAiBzB,EAAMF,KAAvB,KAEA,yBAAK2B,GAAG,UAAR,KAAoBzB,EAAMD,SAG5B,yBAAK0B,GAAG,UACN,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKI,GAAI,CAAEF,KAAM,EAAGC,OAAQ,IAC1B,kBAACI,EAAA,EAAD,CACEC,QAAQ,kBACRC,KAAK,KACLX,GAAG,YACHY,QAxBE,WAClBrB,QAAQC,IAAI,4BACZZ,IArCkB,WAClB,IAAIiC,EAAY,CACd,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGEC,EAAY5B,KAAKC,MAAMD,KAAKE,SAAWyB,EAAUvB,QAE9CX,EAAS,CAAEF,IAAKoC,EAAUC,KAYjCC,KAuBgB,kBAAC,IAAD,MANF,cAWF,kBAACb,EAAA,EAAD,CAAKI,GAAI,CAAEF,KAAM,EAAGC,OAAQ,IAC1B,uBACEW,KAAI,iDAA4CzC,EAAMF,KAAlD,aAA2DE,EAAMD,QACrE0B,GAAG,cACHiB,OAAO,UAEP,kBAACR,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,KAAK,MACrC,kBAAC,IAAD,MADF,oBCpGLO,MARf,WACE,OACE,yBAAKC,UAAU,iBACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEgBC,SAASC,eAAe,SDmHtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.1db45023.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport { FaTwitter } from \"react-icons/fa\";\nimport { FaBuffer } from \"react-icons/fa\";\nimport axios from \"axios\";\n\nfunction QuoteComponent() {\n  const [quote, setQuote] = useState({\n    text: \"\",\n    author: \"\",\n  });\n\n  const [color, setColor] = useState({\n    hex: \"#1262db\",\n  });\n\n  //Get new quote\n  const getQuote = () => {\n    axios\n      .get(\n        \"https://raw.githubusercontent.com/adriel-meb/Free-Code-Camp/master/Front%20End%20Libraries%20Projects/quotemachine/quote\"\n      )\n      .then((res) => {\n        let randomIndex = Math.floor(Math.random() * res.data.length);\n        console.log(res.data);\n        setQuote({\n          text: res.data[randomIndex].body,\n          author: res.data[randomIndex].title,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  //Change new background color\n  const getNewColor = () => {\n    let hexcolors = [\n      \"#66c3ff\",\n      \"#2c1608\",\n      \"#5c2935\",\n      \"#ca6995\",\n      \"#016612\",\n      \"#0090ad\",\n      \"#9992f6\",\n      \"#9f0fef\",\n      \"#97a98b\",\n      \"#278ea5\",\n      \"#800040\",\n      \"#391313\",\n      \"#775ada\",\n      \"#003300\",\n      \"#ac3f21\",\n      \"#c03546\",\n      \"#107a8b\",\n      \"#0b8457\",\n      \"#ff5959\",\n      \"#caa5f1\",\n    ];\n\n    let randomHex = Math.floor(Math.random() * hexcolors.length);\n\n    return setColor({ hex: hexcolors[randomHex] });\n  };\n\n  //retrieve quotes\n  useEffect(() => {\n    getQuote();\n  }, []);\n\n  //handle click functions\n  const handleClick = () => {\n    console.log(\"you have click NEW QUOTE\");\n    getQuote();\n    getNewColor();\n  };\n\n  return (\n    <Container fluid id=\"Container\">\n      <Row>\n        <Col md={{ span: 6, offset: 3 }} lg={{ span: 10, offset: 1 }}>\n          <div id=\"quote-box\" style={{ backgroundColor: color.hex }}>\n            <div id=\"quote\">\n              <div id=\"text\">\"{quote.text}\"</div>\n\n              <div id=\"author\">- {quote.author}</div>\n            </div>\n\n            <div id=\"footer\">\n              <Row>\n                <Col lg={{ span: 6, offset: 3 }}>\n                  <Button\n                    variant=\"outline-primary\"\n                    size=\"lg\"\n                    id=\"new-quote\"\n                    onClick={handleClick}\n                  >\n                    <FaBuffer />\n                    New Quote\n                  </Button>\n                </Col>\n\n                <Col lg={{ span: 6, offset: 3 }}>\n                  <a\n                    href={`https://twitter.com/intent/tweet?text=\"${quote.text}\"-${quote.author}`}\n                    id=\"tweet-quote\"\n                    target=\"_blank\"\n                  >\n                    <Button variant=\"outline-primary\" size=\"lg\">\n                      <FaTwitter /> Tweet!\n                    </Button>\n                  </a>\n                </Col>\n              </Row>\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default QuoteComponent;\n","import React from \"react\";\nimport QuoteComponent from \"./QuoteComponent\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"rootContainer\">\n      <QuoteComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n/* import { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore();\n */\nReactDOM.render(\n  /*  <Provider store={store}> */\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  /* </Provider> */ document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}